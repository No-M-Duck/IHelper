Абстракция — это концепция скрытия деталей реализации и предоставления только основной функциональности пользователю.
В Java абстракция достигается с помощью абстрактных классов и интерфейсов, где только основные методы и их сигнатуры раскрываются, а детали реализации скрыты.
*
Абстрактный класс может содержать как абстрактные методы (без реализации), так и методы с реализацией, в то время как в интерфейсе до Java 8 все методы были абстрактными.
Класс может наследовать только один абстрактный класс, но реализовать множество интерфейсов.
Интерфейсы используются для задания контрактов, тогда как абстрактные классы предоставляют частичную реализацию.
*
Иерархия исключений в Java начинается с класса Throwable, который делится на две основные ветви:
Error: исключения, возникающие в результате серьезных ошибок, которые обычно не должны быть обработаны приложением (например, OutOfMemoryError).
Exception: содержит исключения, которые могут быть обработаны. Делится на:
RuntimeException: непроверяемые исключения (unchecked), которые могут возникнуть во время выполнения (например, NullPointerException).
Другие проверяемые исключения (checked), которые должны быть обработаны (например, IOException).
*
Основные способы обработки исключений в Java:
try-catch: блок, который перехватывает исключения.
try-catch-finally: добавляет блок finally для выполнения кода, независимо от того, возникло исключение или нет.
throws: указывает, что метод может выбросить исключение.
throw: используется для выброса исключения вручную.
*
try-with-resources позволяет автоматически закрывать ресурсы (например, потоки ввода-вывода) после использования. Он обеспечивает более безопасную работу с ресурсами, гарантируя их закрытие, даже если в блоке try произошло исключение.
*
Основные классы для работы с потоками в Java:
InputStream и OutputStream для побайтного ввода и вывода.
Reader и Writer для символьного ввода и вывода.
BufferedInputStream, BufferedReader для буферизации.
FileInputStream и FileOutputStream для работы с файлами.
*
Важно:
Всегда закрывать потоки после использования (например, через try-with-resources).
Использовать буферизацию для повышения производительности.
Обрабатывать возможные исключения (например, IOException).
*
NIO (New Input/Output) — это пакет, представленный в Java 1.4, для работы с неблокирующими потоками. Он использует каналы и буферы, что позволяет обрабатывать большие объемы данных и эффективно работать с сетевыми соединениями. Преимущества:
Неблокирующий ввод-вывод.
Каналы и буферы для управления потоками данных.
*
Можно использовать классы File, FileWriter или BufferedWriter. Пример создания и записи в файл:
FileWriter writer = new FileWriter("example.txt");
writer.write("Hello, World!");
writer.close();
*
BufferedReader reader = new BufferedReader(new FileReader("example.txt"));
String line;
while ((line = reader.readLine()) != null) {
    System.out.println(line);
}
reader.close();
*
Сериализация — это процесс преобразования объекта в поток байтов для его сохранения или передачи через сеть. Объект должен реализовывать интерфейс Serializable.
*
	Пример сериализации:
ObjectOutputStream out = new ObjectOutputStream(new FileOutputStream("object.dat"));
out.writeObject(someObject);
out.close();
	Пример десериализации:
ObjectInputStream in = new ObjectInputStream(new FileInputStream("object.dat"));
SomeClass obj = (SomeClass) in.readObject();
in.close();
*
Для этого можно использовать ключевое слово transient для полей, которые не должны быть сериализованы.
*
Стандартный IO использует потоки для работы с вводом/выводом и блокирует выполнение программы до завершения операции. NIO предоставляет каналы и буферы для неблокирующего ввода-вывода, что позволяет более эффективно управлять потоками данных и ресурсами.
*
Каналы — это объект, который обеспечивает связь между источником и приемником данных, они асинхронны и поддерживают неблокирующие операции. Пример: FileChannel используется для работы с файлами, а SocketChannel — для работы с сетевыми подключениями.
*
Буферы — это контейнеры для данных, которые используются при чтении и записи через каналы. Буферы работают с позициями, ограничениями и емкостью, что позволяет контролировать количество данных для записи или чтения. Пример: ByteBuffer.allocate(1024) создаст буфер на 1024 байта.
*
Селекторы используются для мониторинга множества каналов с неблокирующим вводом-выводом. Они позволяют обрабатывать несколько каналов одной нитью, улучшая производительность. Селекторы позволяют отслеживать состояние каналов, например, готовность к чтению или записи.
*
Для этого можно использовать FileChannel и ByteBuffer:
Path path = Paths.get("example.txt");
FileChannel fileChannel = FileChannel.open(path, StandardOpenOption.READ);
ByteBuffer buffer = ByteBuffer.allocate(1024);
int bytesRead = fileChannel.read(buffer);
*
Класс Files предоставляет множество статических методов для работы с файлами и директориями. Примеры: Files.copy(), Files.move(), Files.delete(), Files.exists()
*
Для этого используется пакет java.nio.channels и класс AsynchronousFileChannel, который позволяет асинхронно читать и записывать файлы. Метод read() выполняет чтение, возвращая Future или используя CompletionHandler для обработки результатов.
*
В неблокирующем режиме канал возвращает управление сразу, если операция не может быть выполнена немедленно. Например, метод read() в SocketChannel возвращает 0, если данных пока нет, и не блокирует выполнение потока.
*